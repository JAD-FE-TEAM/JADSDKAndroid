//apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8" //代码覆盖库jacoco版本号
}

android {
    defaultConfig {
        // 方法数>65536的解决办法
        multiDexEnabled true

        // 参考 https://developer.android.com/training/testing/junit-runner?hl=zh-cn
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    buildTypes {
        debug {
            // 打开覆盖率统计开关
            testCoverageEnabled true
        }
    }

    testOptions {
//        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources true
        }
    }
}

dependencies {
    // 方法数>65536的解决办法
    implementation 'androidx.multidex:multidex:2.0.1'

    androidTestImplementation 'org.jacoco:org.jacoco.core:0.8.8'

    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.google.truth:truth:1.0'
    androidTestImplementation 'org.mockito:mockito-android:3.5.10'
    androidTestImplementation 'androidx.test:runner:1.4.0'

    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:orchestrator:1.4.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

/**
 * *****************************************
 * 以下为单测配置
 * *****************************************
 */

// Case失败也不会影响覆盖率报表的生成
project.gradle.taskGraph.whenReady {
//    connectedJadDebugAndroidTest {
//        ignoreFailures = true
//    }
}

// 源代码路径，你有多少个module，你就在这写多少个路径
def coverageSourceDirs = [
        '../jad_yun_core/src/main/java',
        '../jad_yun_banner/src/main/java',
        '../jad_yun_feed/src/main/java',
        '../jad_yun_interstitial/src/main/java',
        '../jad_yun_splash/src/main/java',
        '../jad_yun_native/src/main/java',
        '../utils/src/main/java',
]

//解析任务
//task jacocoTestReport(type: JacocoReport) {
task jacocoTestReport(type: JacocoReport, dependsOn: ['createJadDebugCoverageReport']) {
    System.out.println("====jacocoTestReport====")
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.required.set(false)
        html.required.set(true)
        html.destination file("build/jacocoHtml")
    }
    //检测覆盖率的class目录
    classDirectories.setFrom(files([
            fileTree(
                    dir: '../jad_yun_core/build/intermediates/javac/jadDebug/classes',
                    excludes: ['**/R*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/BuildConfig*.class',
                               '**/Manifest*.*'
                    ]),
            fileTree(
                    dir: '../jad_yun_banner/build/intermediates/javac/jadDebug/classes',
                    excludes: ['**/R*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/BuildConfig*.class',
                               '**/Manifest*.*'
                    ]),
            fileTree(
                    dir: '../jad_yun_feed/build/intermediates/javac/jadDebug/classes',
                    excludes: ['**/R*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/BuildConfig*.class',
                               '**/Manifest*.*'
                    ]),
            fileTree(
                    dir: '../jad_yun_interstitial/build/intermediates/javac/jadDebug/classes',
                    excludes: ['**/R*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/BuildConfig*.class',
                               '**/Manifest*.*'
                    ]),
            fileTree(
                    dir: '../jad_yun_splash/build/intermediates/javac/jadDebug/classes',
                    excludes: ['**/R*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/BuildConfig*.class',
                               '**/Manifest*.*'
                    ]),
            fileTree(
                    dir: '../jad_yun_native/build/intermediates/javac/jadDebug/classes',
                    excludes: ['**/R*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/BuildConfig*.class',
                               '**/Manifest*.*'
                    ]),
            fileTree(
                    dir: '../utils/build/intermediates/javac/jadDebug/classes',
                    excludes: ['**/R*.class',
                               '**/*$InjectAdapter.class',
                               '**/*$ModuleAdapter.class',
                               '**/*$ViewInjector*.class',
                               '**/BuildConfig*.class',
                               '**/Manifest*.*'
                    ]),
    ]))
    //设置需要检测覆盖率的目录
    sourceDirectories.setFrom(files(coverageSourceDirs))
    //jacoco解析的ec文件的目录
//    executionData.setFrom(fileTree(dir: project.buildDir, includes: ['outputs/code_coverage/**/*.ec', 'outputs/code_coverage/**/*.exec']))
//    executionData.setFrom(fileTree(dir: project.buildDir, includes: ['outputs/code_coverage/jadDebugAndroidTest/connected/**/*.ec',
//    'demo/build/outputs/code_coverage/jadDebugAndroidTest/connected/Nexus6PAPI31\\(AVD\\)\\ -\\ 12/*.ec']))
    // TODO: 这里也不能写死
    executionData.setFrom(fileTree(dir: project.buildDir, includes: ['outputs/code_coverage/jingdongDebugAndroidTest/connected/*/coverage.ec']))


//    doFirst {
//        new File("$buildDir/intermediates/app_classes/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }

}


////////////////////////////////////////////////////////////////////////////////////////////////////
//
//project.afterEvaluate { project ->
//    setupAndroidReporting()
//}
//
//def setupAndroidReporting() {
//    tasks.withType(Test) {
//        // Whether or not classes without source location should be instrumented
//        jacoco.includeNoLocationClasses = true
//        jacoco.excludes = ['jdk.internal.*']
//    }
//
//    // Grab all build types and product flavors
//    def buildTypes = android.buildTypes.collect { type ->
//        type.name
//    }
//    def productFlavors = android.productFlavors.collect { flavor ->
//        flavor.name
//    }
//    // When no product flavors defined, use empty
//    if (!productFlavors) productFlavors.add('')
//    productFlavors.each { productFlavorName ->
//        buildTypes.each { buildTypeName ->
//            def sourceName, sourcePath
//            if (!productFlavorName) {
//                sourceName = sourcePath = "${buildTypeName}"
//            } else {
//                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
//                sourcePath = "${productFlavorName}/${buildTypeName}"
//            }
//            def testTaskName = "test${sourceName.capitalize()}UnitTest"
//            System.out.println("Task -> $testTaskName")
////            System.out.println("SourceName -> $sourceName")
//
//            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
//            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: ["$testTaskName", "create${sourceName.capitalize()}CoverageReport"]) {
//                group = "Reporting"
//                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
//
//                def fileFilter = [
//                        // data binding
//                        'android/databinding/**/*.class',
//                        '**/android/databinding/*Binding.class',
//                        '**/android/databinding/*',
//                        '**/androidx/databinding/*',
//                        '**/BR.*',
//                        // android
//                        '**/R.class',
//                        '**/R$*.class',
//                        '**/BuildConfig.*',
//                        '**/Manifest*.*',
//                        '**/*Test*.*',
//                        'android/**/*.*',
//                        // kotlin
//                        '**/*MapperImpl*.*',
//                        '**/*$ViewInjector*.*',
//                        '**/*$ViewBinder*.*',
//                        '**/BuildConfig.*',
//                        '**/*Component*.*',
//                        '**/*BR*.*',
//                        '**/Manifest*.*',
//                        '**/*$Lambda$*.*',
//                        '**/*Companion*.*',
//                        '**/*Module*.*',
//                        '**/*Dagger*.*',
//                        '**/*Hilt*.*',
//                        '**/*MembersInjector*.*',
//                        '**/*_MembersInjector.class',
//                        '**/*_Factory*.*',
//                        '**/*_Provide*Factory*.*',
//                        '**/*Extensions*.*',
//                        // sealed and data classes
//                        '**/*$Result.*',
//                        '**/*$Result$*.*',
//                        // adapters generated by moshi
//                        '**/*JsonAdapter.*',
//                ]
//
////                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/jadDebug/classes", excludes: fileFilter)
//                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
////                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
////                classDirectories.from = files([javaTree], [kotlinTree])
//                classDirectories.from = files([javaTree])
////                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
//                executionData.setFrom(fileTree(dir: project.buildDir, includes: ['outputs/code_coverage/jadDebugAndroidTest/connected/*/coverage.ec']))
//
//                def coverageSourceDirs = ["src/main/java",
//                                          "src/$productFlavorName/java",
//                                          "src/$buildTypeName/java"]
//
////                def coverageSourceDirs = [
////                        '../jad_yun_core/src/main/java',
////                        '../jad_yun_banner/src/main/java',
////                        '../jad_yun_feed/src/main/java',
////                        '../jad_yun_interstitial/src/main/java',
////                        '../jad_yun_splash/src/main/java',
////                        '../jad_yun_native/src/main/java',
////                        '../utils/src/main/java',
////                ]
//                sourceDirectories.setFrom(files(coverageSourceDirs))
////                additionalSourceDirs.setFrom(files(coverageSourceDirs))
//
//                reports {
//                    csv.enabled false // change if needed
//                    xml.enabled false // change if needed
//                    html {
//                        enabled true
//                        destination file("${buildDir}/coverage-report")
//                    }
//                }
//            }
//        }
//    }
//}
////////////////////////////////////////////////////////////////////////////////////////////////////